# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish Docker image

on:
  workflow_dispatch:
    inputs:
      skipUpdateCheck:
        description: "Skip checking if image needs update and always run the build steps"
        required: false
        default: false
        type: boolean
      push:
        description: "Push to docker hub"
        required: false
        default: false
        type: boolean
  schedule:
    - cron: "5 3 * * *"
  push:
    branches:
      - "**"
    tags:
      - "*"
    paths-ignore:
      - "**.md"
      - "**.txt"
      - ".gitattribute"
      - ".gitignore"
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - "**.md"
      - "**.txt"
      - ".gitattribute"
      - ".gitignore"

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    strategy:
      fail-fast: false
      matrix:
        year: ["2019", "2022"]
    runs-on: windows-${{ matrix.year }}
    outputs:
      meta_tags: ${{ steps.meta.outputs.tags }}
      push_2019: ${{ steps.push_image.outputs[format('push_{0}', matrix.year)] }}
      push_2022: ${{ steps.push_image.outputs[format('push_{0}', matrix.year)] }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        if: ${{ github.event_name != 'schedule' }}
      - name: Check out the latest branch
        uses: actions/checkout@v2
        with:
          ref: latest
        if: ${{ github.event_name == 'schedule' }}

      - name: Check if update available
        id: check
        uses: giggio/docker-image-update-checker@v2
        with:
          base-image: mcr.microsoft.com/windows/servercore:ltsc${{ matrix.year }}
          image: lambda3/github-runner-windows
          os: windows
          verbose: true
        if: ${{ github.event_name == 'schedule' }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: lambda3/github-runner-windows
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/latest' || github.event_name == 'schedule' }}
            type=ref,event=branch,enable=${{ github.ref != 'refs/heads/latest' && github.event_name != 'schedule' }}
            type=ref,event=tag
        if: ${{ success() && (contains(fromJson('["push", "pull_request"]'), github.event_name) || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || (inputs.skipUpdateCheck && github.event_name == 'workflow_dispatch')) }}

      - name: Build image
        working-directory: ./runner/
        run: |
          $ErrorActionPreference = "Stop"
          Invoke-Expression "docker build --isolation process --build-arg LTSC_YEAR=${{ matrix.year }} --pull $($env:TAGS.Split("`n") | % { '-t "' + $_ + '-windowsservercore-ltsc${{ matrix.year }}"' }) $($env:LABELS.Split("`n") | % { '--label "' + $_ + '"' }) ."
          if ($LASTEXITCODE -ne 0) { throw "Docker build failed." }
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          LABELS: ${{ steps.meta.outputs.labels }}
        if: ${{ success() && (contains(fromJson('["push", "pull_request"]'), github.event_name) || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || (inputs.skipUpdateCheck && github.event_name == 'workflow_dispatch')) }}

      - name: Docker login
        id: docker_login
        run: |
          $ErrorActionPreference = "Stop"
          docker login -u lambdatres -p $env:DOCKER_PASSWORD
          if ($LASTEXITCODE -ne 0) { throw "Docker login failed." }
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        if: ${{ success() && ((github.event_name == 'push' && (github.ref == 'refs/heads/latest' || startsWith(github.ref, 'refs/tags/'))) || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || (inputs.skipUpdateCheck && inputs.push && github.event_name == 'workflow_dispatch')) }}

      - name: Push image
        id: push_image
        run: |
          $ErrorActionPreference = "Stop"
          $($env:TAGS.Split("`n") | % {
            docker push $_-windowsservercore-ltsc${{ matrix.year }}
            if ($LASTEXITCODE -ne 0) { throw "Docker push failed." }
          })
          Write-Output "::set-output name=push_${{ matrix.year }}::true"
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        if: ${{ success() && ((github.event_name == 'push' && (github.ref == 'refs/heads/latest' || startsWith(github.ref, 'refs/tags/'))) || (steps.check.outputs.needs-updating == 'true' && github.event_name == 'schedule') || (inputs.skipUpdateCheck && inputs.push && github.event_name == 'workflow_dispatch')) }}

      - name: Docker logout
        run: docker logout
        if: ${{ always() && steps.docker_login.outcome != 'skipped' }}

  push_manifest:
    name: Push Docker manifest to Docker Hub
    runs-on: windows-latest
    needs: push_to_registry
    if: ${{ success() && (needs.push_to_registry.outputs.push_2019 == 'true' || needs.push_to_registry.outputs.push_2022 == 'true')}}
    steps:
      - name: Docker login
        id: docker_login
        run: |
          $ErrorActionPreference = "Stop"
          docker login -u lambdatres -p $env:DOCKER_PASSWORD
          if ($LASTEXITCODE -ne 0) { throw "Docker login failed." }
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push manifest
        run: |
          $env:DOCKER_CLI_EXPERIMENTAL='enabled'
          docker manifest create $env:TAGS --amend $env:TAGS-windowsservercore-ltsc2019 --amend $env:TAGS-windowsservercore-ltsc2022
          docker manifest push $env:TAGS
        env:
          TAGS: ${{ needs.push_to_registry.outputs.meta_tags }}
      - name: Docker logout
        run: docker logout
        if: ${{ always() && steps.docker_login.outcome != 'skipped' }}
